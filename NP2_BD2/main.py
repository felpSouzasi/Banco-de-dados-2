"""
# Criar tabela de usuários
CREATE TABLE IF NOT EXISTS usuarios (
    id INT,
    estado TEXT,
    cidade TEXT,
    endereco TEXT,
    nome TEXT,
    email TEXT,
    interesses LIST<TEXT>,
    PRIMARY KEY ((estado, cidade), id)
);

-- Criar tabela de produtos
CREATE TABLE IF NOT EXISTS produtos (
    id INT,
    categoria TEXT,
    nome TEXT,
    custo INT,
    preco INT,
    quantidade INT,
    PRIMARY KEY (categoria, id)
);
"""

#Lembra que estava dando erro na conexão? Então, testei com as conexões das atividades antigas conforme
#o solicitado, não funcionou do mesmo jeito, creio que seja meu pc mesmo
import json

from datetime import datetime

from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory

import redis

# This secure connect bundle is autogenerated when you download your SCB,
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-np2-bd2.zip'
}

# This token JSON file is autogenerated when you download your token,
# if yours is different update the file name below
with open("teste.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
cassandra_session = cluster.connect()
cassandra_session.row_factory = dict_factory # Returning dict from Cassandra
cassandra_session.set_keyspace('NP2') # Change to your keyspace


# Criação das tabelas
cassandra_session.execute("""
    CREATE TABLE IF NOT EXISTS usuarios (
        id INT,
        estado TEXT,
        cidade TEXT,
        endereco TEXT,
        nome TEXT,
        email TEXT,
        interesses LIST<TEXT>,
        PRIMARY KEY ((estado, cidade), id)
    )
""")

cassandra_session.execute("""
    CREATE TABLE IF NOT EXISTS produtos (
        id INT,
        categoria TEXT,
        nome TEXT,
        custo INT,
        preco INT,
        quantidade INT,
        PRIMARY KEY (categoria, id)
    )
""")

cassandra_session.execute("""
    CREATE TABLE IF NOT EXISTS vendas (
        id INT,
        dia INT,
        mes INT,
        ano INT,
        hora TEXT,
        valor INT,
        produtos LIST<MAP<INT, INT>>,
        usuario MAP<TEXT, TEXT>,
        PRIMARY KEY ((dia, mes, ano), hora, id)
    )
""")

print("Tabelas criadas com sucesso.")



# Conexão com o Redis
redis_conn = redis.Redis(
    host="redis-17807.c8.us-east-1-2.ec2.redns.redis-cloud.com", port=17807,
    username="default",
    password="Rj0G9Z376Tkqg1PHnltqXFyRk5SowoCS",
    decode_responses=True
)

# ------------------- !! Attention !! -------------------
redis_conn.flushall() #Clear Redis database
# -------------------------------------------------------

def questao_1_a(users):
    for user in users:
        cassandra_session.execute(
            """
            INSERT INTO usuarios (id, estado, cidade, endereco, nome, email, interesses)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            """,
            (user['id'], user['estado'], user['cidade'], user['endereco'], user['nome'], user['email'], user['interesses'])
        )
    result = cassandra_session.execute("SELECT COUNT(*) FROM usuarios")
    return result.one()['count']

def test_questao_1_a():
    users = [
        {"id": 1, "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua A, 45", "nome": "Serafim Amarantes", "email": "samarantes@g.com", "interesses": ["futebol", "pagode", "engraçado", "cerveja", "estética"]},
        {"id": 2, "estado": "São Paulo", "cidade": "São Bento do Sapucaí", "endereco": "Rua B, 67", "nome": "Tamara Borges", "email": "tam_borges@g.com", "interesses": ["estética", "jiujitsu", "luta", "academia", "maquiagem"]},
        {"id": 3, "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua C, 84", "nome": "Ubiratã Carvalho", "email": "bira@g.com", "interesses": ["tecnologia", "hardware", "games", "culinária", "servers"]},
        {"id": 4, "estado": "Minas Gerais", "cidade": "Pouso Alegre", "endereco": "Rua D, 21", "nome": "Valéria Damasco", "email": "valeria_damasco@g.com", "interesses": ["neurociências", "comportamento", "skinner", "laboratório", "pesquisa"]}
    ]
    assert len(users) == questao_1_a(users)


def questao_1_b(products):
    total_cost = 0
    for product in products:
        cassandra_session.execute(
            """
            INSERT INTO produtos (id, categoria, nome, custo, preco, quantidade)
            VALUES (%s, %s, %s, %s, %s, %s)
            """,
            (product['id'], product['categoria'], product['nome'], int(product['custo'] * 100), int(product['preco'] * 100), product['quantidade'])
        )
        total_cost += product['custo'] * product['quantidade']
    return total_cost

def teste_questao_1_b():
    products = [
        {"id": 1, "categoria": "escritório", "nome": "Cadeira HM conforto", "custo": 2000.00, "preco": 3500.00, "quantidade": 120},
        {"id": 2, "categoria": "culinária", "nome": "Tábua de corte Hawk", "custo": 360.00, "preco": 559.90, "quantidade": 40},
        {"id": 3, "categoria": "tecnologia", "nome": "Notebook X", "custo": 3000.00, "preco": 4160.99, "quantidade": 76},
        {"id": 4, "categoria": "games", "nome": "Headset W", "custo": 265.45, "preco": 422.80, "quantidade": 88},
        {"id": 5, "categoria": "tecnologia", "nome": "Smartphone X", "custo": 2000.00, "preco": 3500.00, "quantidade": 120},
        {"id": 6, "categoria": "games", "nome": "Gamepad Y", "custo": 256.00, "preco": 519.99, "quantidade": 40},
        {"id": 7, "categoria": "estética", "nome": "Base Ismusquim", "custo": 50.00, "preco": 120.39, "quantidade": 76},
        {"id": 8, "categoria": "cerveja", "nome": "Gutten Bier IPA 600ml", "custo": 65.45, "preco": 122.80, "quantidade": 88}
    ]
    total_cost = 765559.20
    assert total_cost == questao_1_b(products)


def questao_2(state):
    users = cassandra_session.execute(
        "SELECT * FROM usuarios WHERE estado = %s", (state,)
    ).all()

    for user in users:
        redis_conn.hmset(f"user:{user['id']}", user)

    return [
        redis_conn.hgetall(f"user:{user['id']}")
        for user in users
    ]

def test_questao_2():
    state = "Minas Gerais"
    users = [
        {"id": '1', "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua A, 45", "nome": "Serafim Amarantes", "email": "samarantes@g.com", "interesses": ["futebol", "pagode", "engraçado", "cerveja", "estética"]},
        {"id": '3', "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua C, 84", "nome": "Ubiratã Carvalho", "email": "bira@g.com", "interesses": ["tecnologia", "hardware", "games", "culinária", "servers"]},
        {"id": '4', "estado": "Minas Gerais", "cidade": "Pouso Alegre", "endereco": "Rua D, 21", "nome": "Valéria Damasco", "email": "valeria_damasco@g.com", "interesses": ["neurociências", "comportamento", "skinner", "laboratório", "pesquisa"]}
    ]
    assert users == sorted(questao_2(state), key=lambda d: d['id'])


def questao_3(user_id):
    user_interests = redis_conn.hget(f"user:{user_id}", 'interesses').split(',')
    products = []
    for interest in user_interests:
        result = cassandra_session.execute(
            "SELECT id, nome, preco FROM produtos WHERE categoria = %s", (interest,)
        ).all()
        products.extend(result)
    return products

def test_questao_3():
    user_id = 3
    products = [
        {"id": 2, "nome": "Tábua de corte Hawk", "preco": 559.90},
        {"id": 3, "nome": "Notebook X", "preco": 4160.99},
        {"id": 4, "nome": "Headset W", "preco": 422.80},
        {"id": 5, "nome": "Smartphone X", "preco": 3500.00},
        {"id": 6, "nome": "Gamepad Y", "preco": 519.99}
    ]
    assert products == sorted(questao_3(user_id), key=lambda d: d['id'])


def questao_4(user_id, cart):
    for item in cart:
        redis_conn.hmset(f"cart:{user_id}:{item['id']}", item)
    return [
        redis_conn.hgetall(f"cart:{user_id}:{item['id']}")
        for item in cart
    ]

def test_questao_4():
    user_id = 3
    cart = [
        {"id": '4', "nome": "Headset W", "preco": '422.80', "quantidade": '1'},
        {"id": '6', "categoria": "games", "nome": "Gamepad Y", "preco": '519.99', "quantidade": '2'},
    ]
    assert cart == sorted(questao_4(user_id, cart), key=lambda d: d["id"])

def questao_5(user_id, date_time):
    cart_items = [
        redis_conn.hgetall(f"cart:{user_id}:{item_id}")
        for item_id in redis_conn.keys(f"cart:{user_id}:*")
    ]
    user_email = redis_conn.hget(f"user:{user_id}", 'email')
    total_value = sum(float(item['preco']) * int(item['quantidade']) for item in cart_items)

    venda_id = cassandra_session.execute(
        "SELECT MAX(id) FROM vendas"
    ).one()['system.max(id)'] + 1

    cassandra_session.execute(
        """
        INSERT INTO vendas (id, dia, mes, ano, hora, valor, produtos, usuario)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """,
        (venda_id, date_time.day, date_time.month, date_time.year, date_time.strftime("%H:%M"), int(total_value * 100), cart_items, {"email": user_email})
    )

    result = cassandra_session.execute(
        "SELECT usuario['email'] AS email, hora, valor FROM vendas WHERE dia = %s AND mes = %s AND ano = %s",
        (date_time.day, date_time.month, date_time.year)
    ).all()

    return [
        {"usuario": row['email'], 'hora': row['hora'], 'valor': row['valor'] / 100}
        for row in result
    ]

def test_questao_5():
    user_id = 3
    date_time = datetime.now()
    sales = [{"usuario": 'bira@g.com', 'hora': date_time.strftime("%H:%M"), 'valor': 1462.78}]
    assert sales == questao_5(user_id, date_time)
